{"version":3,"sources":["components/Jumbotron.js","utils/API.js","components/TableContainer.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","React","Component","getInfo","query","axios","get","TableContainer","state","employees","employeeInfo","getEmployees","then","response","data","results","setState","a","buildData","isLoading","catch","err","console","log","map","employee","employeePicture","src","picture","medium","alt","first","name","last","email","phone","city","location","this","columns","label","field","width","rows","entries","hover","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kRAiBeA,E,uKAbP,OACI,6BACI,yBAAKC,UAAU,8BACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,0BAAd,sBACA,uBAAGA,UAAU,+BAAb,0F,GAPAC,IAAMC,W,iBCEf,SAASC,EAAQC,GAC9B,OAAOC,IAAMC,IAHC,iD,IC4FDC,E,4MAxFbC,MAAQ,CACNC,UAAW,GACXC,aAAc,I,EAOhBC,aAAe,iBAAM,CACnBR,IACGS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,WAC/BH,MAAK,SAAAE,GAAU,EAAKE,SAAS,CAAEP,UAAWK,OAC1CF,KAHH,sBAGQ,sBAAAK,EAAA,sDAAc,EAAKD,SAAS,CAAEN,aAAc,EAAKQ,YAAaC,WAAW,IAAzE,4CACLC,OAAM,SAACC,GAAUC,QAAQC,IAAIF,Q,EAGlCH,UAAY,WAgBV,OAfgB,EAAKV,MAAMC,UAAUe,KAAI,SAACC,GACxC,MACE,CACEC,gBAAiB,yBACfC,IAAKF,EAASG,QAAQC,OACtBC,IAAI,aAENC,MAAON,EAASO,KAAKD,MACrBE,KAAMR,EAASO,KAAKC,KACpBC,MAAOT,EAASS,MAChBC,MAAOV,EAASU,MAChBC,KAAMX,EAASY,SAASD,U,kEAvB9BE,KAAK3B,iB,+BA+BL,IAAMG,EAAO,CACXyB,QAAS,CACP,CACEC,MAAO,mBACPC,MAAO,kBACPC,MAAO,KAET,CACEF,MAAO,aACPC,MAAO,QACPC,MAAO,KAET,CACEF,MAAO,YACPC,MAAO,OACPC,MAAO,KAET,CACEF,MAAO,QACPC,MAAO,QACPC,MAAO,KAET,CACEF,MAAO,eACPC,MAAO,QACPC,MAAO,KAET,CACEF,MAAO,OACPC,MAAO,OACPC,MAAO,MAGXC,KAAML,KAAK9B,MAAME,cAGnB,OACE,6BACE,kBAAC,EAAD,MACA,6BAASV,UAAU,aACjB,kBAAC,IAAD,CACE4C,QAAS,GACTC,OAAK,EACL/B,KAAMA,U,GAjFWb,IAAMC,WCMpB4C,MARf,WACI,OACI,6BACI,kBAAC,EAAD,QCNQC,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MACvB,2DCANC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdxC,OAAM,SAAAyC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.5186701b.chunk.js","sourcesContent":["import React from 'react';\n\nclass Jumbotron extends React.Component {\n    render() {\n        return (\n            <div >\n                <div className=\"jumbotron jumbotron-fluid \">\n                    <div className=\"container\">\n                        <h1 className=\"text-center text-white\">Employee Directory</h1>\n                        <p className=\"lead text-center text-white\">Click on heading to filter by the name or use the search box to narrow results.</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Jumbotron;","import axios from \"axios\";\n\nconst BASEURL = \"https://randomuser.me/api/?results=100&nat=us\";\n\nexport default function getInfo(query) {\n  return axios.get(BASEURL);\n};\n","import React from \"react\";\nimport { MDBDataTable } from 'mdbreact';\nimport Jumbotron from \"./Jumbotron\";\nimport getInfo from \"../utils/API\";\n\nclass TableContainer extends React.Component {\n  state = {\n    employees: [],\n    employeeInfo: []\n  };\n\n  componentDidMount() {\n    this.getEmployees();\n  }\n\n  getEmployees = () => [\n    getInfo()\n      .then(response => response.data.results)\n      .then(data => { this.setState({ employees: data }) })\n      .then(async () => { this.setState({ employeeInfo: this.buildData(), isLoading: false }) })\n      .catch((err) => { console.log(err); })\n  ];\n\n  buildData = () => {\n    let employees = this.state.employees.map((employee) => {\n      return (\n        {\n          employeePicture: <img\n            src={employee.picture.medium}\n            alt='employee'\n          />,\n          first: employee.name.first,\n          last: employee.name.last,\n          email: employee.email,\n          phone: employee.phone,\n          city: employee.location.city\n        }\n      )\n    });\n    return employees;\n  }\n\n  render() {\n    const data = {\n      columns: [\n        {\n          label: 'Employee Picture',\n          field: 'employeePicture',\n          width: 200\n        },\n        {\n          label: 'First Name',\n          field: 'first',\n          width: 150\n        },\n        {\n          label: 'Last Name',\n          field: 'last',\n          width: 150\n        },\n        {\n          label: 'Email',\n          field: 'email',\n          width: 200\n        },\n        {\n          label: 'Phone Number',\n          field: 'phone',\n          width: 150\n        },\n        {\n          label: 'City',\n          field: 'city',\n          width: 100\n        }\n      ],\n      rows: this.state.employeeInfo\n    };\n\n    return (\n      <div>\n        <Jumbotron />\n        <section className=\"container\">\n          <MDBDataTable\n            entries={20}\n            hover\n            data={data}\n          />\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default TableContainer;","import React from \"react\";\nimport TableContainer from \"./components/TableContainer\";\n\nfunction App() {\n    return (\n        <div>\n            <TableContainer/>\n        </div>\n    );\n};\n\nexport default App;","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}